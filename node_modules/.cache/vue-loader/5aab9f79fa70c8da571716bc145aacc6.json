{"remainingRequest":"/Users/frankkroondijk/Documents/VueDev/rurallivinglab/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/frankkroondijk/Documents/VueDev/rurallivinglab/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/frankkroondijk/Documents/VueDev/rurallivinglab/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/frankkroondijk/Documents/VueDev/rurallivinglab/src/views/Course.vue?vue&type=template&id=9c7d2556&","dependencies":[{"path":"/Users/frankkroondijk/Documents/VueDev/rurallivinglab/src/views/Course.vue","mtime":1590967029087},{"path":"/Users/frankkroondijk/Documents/VueDev/rurallivinglab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/frankkroondijk/Documents/VueDev/rurallivinglab/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/frankkroondijk/Documents/VueDev/rurallivinglab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/frankkroondijk/Documents/VueDev/rurallivinglab/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}